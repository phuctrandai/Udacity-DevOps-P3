name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  - main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab.
# Otherwise, comment out the line below.
# pool: myAgentPool

variables:
  pythonVersion: "3.7.6"
  azureServiceConnectionId: "Udacity-DevOps-P3"
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: "udacity-devops-p3-LinuxVirtualMachine"

stages:
  #--------------------------------------------#
  # BUILD STAGE
  #--------------------------------------------#
  - stage: Build
    jobs:
      - job: ContinuousIntegration
        steps:
          # Postman - Install Newman
          - task: CmdLine@2
            displayName: Install Newman
            inputs:
              script: "sudo npm install -g newman"
              workingDirectory: $(projectRoot)

          # Postman Data Validation Test Suite
          - task: CmdLine@2
            displayName: Run Data Validation Tests
            continueOnError: true
            inputs:
              script: "newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml"
              workingDirectory: "$(projectRoot)/automatedtesting/postman"

          # Postman Regression Test Suite
          - task: CmdLine@2
            displayName: Run Regression Tests
            continueOnError: true
            inputs:
              script: "newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml"
              workingDirectory: "$(projectRoot)/automatedtesting/postman"

          # Postman - Publish Results
          - task: PublishTestResults@2
            displayName: Publish Test Results
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/TEST-*.xml"
              searchFolder: "$(projectRoot)"
              mergeTestResults: true
              testRunTitle: "Postman - Publish Results"

          #--------------------------------------------#
          # Selenium (UI) Test Suite - Archive the package
          # "ArchiveFiles@2" picks up the web package and archives it.
          - task: ArchiveFiles@2
            displayName: "Archive UI Tests"
            inputs:
              rootFolderOrFile: "$(projectRoot)/automatedtesting/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip"
          
          # Selenium Test Suite - Publish the package
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip # Same as the archiveFile artifact above.
            displayName: "Upload Package UI Tests"
            artifact: drop-uitests

          #--------------------------------------------#
          # FakeRestAPI - Archive
          - task: ArchiveFiles@2
            displayName: "Archive FakeRestAPI"
            inputs:
              rootFolderOrFile: "$(projectRoot)/automatedtesting/jmeter/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip"
          
          # FakeRestAPI - Publish
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
            displayName: "Upload Package FakeRestAPI"
            artifact: drop-fakerestapi

          #--------------------------------------------#
          # JMeter (Performance) Test Suite - Archive
          - task: ArchiveFiles@2
            displayName: "Archive PerformanceTestSuite"
            inputs:
              rootFolderOrFile: "$(projectRoot)/automatedtesting/jmeter/perftests"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip"
          # JMeter Test Suite - Publish
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
            displayName: "Upload Package PerformanceTestSuite"
            artifact: drop-perftests

  #--------------------------------------------#
  # DEPLOYMENT STAGE
  #--------------------------------------------#
  - stage: Deploy
    displayName: "Deploy Web App"
    dependsOn: Build
    condition: succeeded()
    jobs:
      #--------------------------------------------#
      # Deploy FakeRestAPI Web App
      - deployment: FakeRestAPI
        pool:
          vmImage: "Ubuntu-18.04"
        environment: $(environmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: "Deploy FakeRestAPI"
                  inputs:
                    azureSubscription: "Udacity-DevOps-P3"
                    appType: "webAppLinux"
                    appName: "udacity-devops-p3-AppService"
                    package: "$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)"
                    runtimeStack: "PYTHON|3.7"
                #--------------------------------------------#
                # Run JMeter test suite against the App Service
                - task: CmdLine@2
                  inputs:
                    script: |
                      wget "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.2.1.tgz"
                      tar -xf apache-jmeter-5.2.1.tgz
                      unzip -o $(Build.BuildId)-perftests.zip
                      ./apache-jmeter-5.2.1/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeter.log -f
                      cat jmeter.log
                    workingDirectory: $(Pipeline.Workspace)/drop-perftests

      #--------------------------------------------#
      # Selenium | Functional UI Tests
      - deployment: VMDeploy
        displayName: Selenium Tests
        environment:
          name: $(environmentName)
          resourceType: VirtualMachine
          tags: selenium
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop-uitests

                - task: Bash@3
                  inputs:
                    targetType: "inline"
                    script: |
                      #! /bin/bash

                      sudo apt-get upgrade -y
                      sudo apt-get install python3-pip -y
                      sudo apt-get install unzip -y
                      sudo apt-get install -y chromium-browser
                      pip3 install selenium
                      cd ~/
                      DIR=/home/testuser/app
                      if [ ! -d "$DIR" ]; then
                          mkdir app
                      fi
                      mv /home/testuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
                      cd app
                      unzip -o $(Build.BuildId)-uitests.zip
                      FILE=/home/testuser/app/chromedriver_linux64.zip
                      if [ ! -f "$FILE" ]; then
                          LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                          wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                          unzip -o chromedriver_linux64.zip
                          sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                      fi
                      export PATH=$PATH:/home/testuser/app
                      echo "Starting Selenium Tests"
                      python3 add_remove_from_cart.py >> selenium.log
                      echo "Completed Selenium Tests. Check selenium.log for results."
