{
	"info": {
		"_postman_id": "73250e44-fdfe-49f8-9f58-2c74d2bb28ce",
		"name": "Data Validation Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7690398"
	},
	"item": [
		{
			"name": "Create Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const expectedSchema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"        \"status\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"data\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"name\": {\r",
							"                    \"type\": \"string\",\r",
							"                },\r",
							"                \"salary\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"age\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"id\": {\r",
							"                    \"type\": \"integer\"\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        \"message\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Response matches JSON schema', () => {\r",
							"    pm.response.to.have.jsonSchema(expectedSchema);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should contain specific data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"success\");\r",
							"    pm.expect(jsonData.message).to.equal(\"Successfully! Record has been added.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"salary\": \"{{salary}}\",\r\n    \"age\": \"{{age}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Employees",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const expectedSchema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"data\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"id\": {\r",
							"            \"type\": \"integer\"\r",
							"          },\r",
							"          \"employee_name\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"employee_salary\": {\r",
							"            \"type\": \"integer\"\r",
							"          },\r",
							"          \"employee_age\": {\r",
							"            \"type\": \"integer\"\r",
							"          },\r",
							"          \"profile_image\": {\r",
							"            \"type\": \"string\"\r",
							"          }\r",
							"        }\r",
							"      }\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  }\r",
							"};\r",
							"\r",
							"pm.test('Response matches JSON schema', () => {\r",
							"    pm.response.to.have.jsonSchema(expectedSchema);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should contain specific data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"success\");\r",
							"    pm.expect(jsonData.message).to.equal(\"Successfully! All records has been fetched.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/employees",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"employees"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://dummy.restapiexample.com",
			"type": "string"
		},
		{
			"key": "name",
			"value": "Dummy User",
			"type": "string"
		},
		{
			"key": "salary",
			"value": "10000000",
			"type": "string"
		},
		{
			"key": "age",
			"value": "25",
			"type": "string"
		}
	]
}