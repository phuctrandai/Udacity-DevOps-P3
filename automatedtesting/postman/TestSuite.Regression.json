{
	"info": {
		"_postman_id": "e72358fb-4cda-47c5-81c5-19c5dd7934da",
		"name": "Regression Testing",
		"description": "# ðŸ§ª Get started here\n\nThis template helps ensure your API continues to work as expected after updates or changes. It contains sample requests and [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) for a series of tests that validate different aspects of an API, including:\n\n1. **Status code verification:** We'll check if the API returns the expected status codes for various requests, ensuring reliability and proper error handling.\n2. **JSON schema verification:** We'll make sure the JSON response conforms to a specified JSON Schema, ensuring API contracts are honored.\n3. **Response time verification:** We'll verify that the API's response time is within the acceptable range, providing a smooth user experience and optimizing performance.\n4. **Response body verification:** We'll validate the structure and content of the response body for accuracy, ensuring the integrity of the data and preventing potential issues downstream.\n5. **Header verification:** We'll confirm the presence and correct values of specific headers in the response, enabling secure and well-structured communication between your app and its users.\n    \n\n## ðŸ”– **How to use this template**\n\n**Step 1:** Send the sample requests and view the response and test results.\n\n**Step 2:** Replace the sample request URLs with your desired API endpoints.\n\n**Step 3:** Customize the tests in the \"Tests\" tab if needed. Don't forget to save your changes.\n\n**Step 4:** [Run the collection](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/) by selecting \"Run\".\n\n<img src=\"https://content.pstmn.io/666cfa65-6e00-4308-871b-f831128bc0ac/Y29sbGVjdGlvbi1ydW5uZXItYnV0dG9uLmpwZWc=\" width=\"246\" height=\"102\">\n\n## ðŸ’¡Related templates\n\n[Integration testing](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=fe506090-ca91-4340-bea9-82d2c3d2bb9a&sourceTemplateId=7ab0f80e-a964-46ee-b948-4a4e3a85809c)  \n[Performance testing](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=3302192d-87dd-4612-b381-61894de21203&sourceTemplateId=7ab0f80e-a964-46ee-b948-4a4e3a85809c)  \n[Mock data generation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=da8ceebc-d4da-478c-ab8a-37634faefc74&sourceTemplateId=7ab0f80e-a964-46ee-b948-4a4e3a85809c)  \n[Common API vulnerabilities check](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e1edbae8-6429-453d-890e-00385eea1811&sourceTemplateId=7ab0f80e-a964-46ee-b948-4a4e3a85809c)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7690398"
	},
	"item": [
		{
			"name": "Create Activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const expectedSchema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"        \"ID\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"Title\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"DueDate\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"Completed\": {\r",
							"            \"type\": \"boolean\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Response matches JSON schema', () => {\r",
							"    pm.response.to.have.jsonSchema(expectedSchema);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.exist;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ID\": 0,\r\n  \"Title\": \"{{title}}\",\r\n  \"DueDate\": \"{{dueDate}}\",\r\n  \"Completed\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/Activities",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"Activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Activities",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const expectedSchema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"ID\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"Title\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"DueDate\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"Completed\": {\r",
							"            \"type\": \"boolean\"\r",
							"        }\r",
							"    }\r",
							"  }\r",
							"};\r",
							"\r",
							"pm.test('Response matches JSON schema', () => {\r",
							"    pm.response.to.have.jsonSchema(expectedSchema);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.exist;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/Activities",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"Activities"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://udacity-devops-p3-appservice.azurewebsites.net",
			"type": "string"
		},
		{
			"key": "title",
			"value": "Test Activity",
			"type": "string"
		},
		{
			"key": "dueDate",
			"value": "2023-12-16T02:47:03.23Z",
			"type": "string"
		}
	]
}